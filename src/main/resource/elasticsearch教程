浏览器访问es server
http://10.144.48.30:9200/_plugin/marvel/sense/


0,创建数据：
PUT /gome/employee/1
{
    "first_name" : "li",
    "last_name" :  "ming",
    "age" :        18,
    "about" :      "I love play football",
    "interests": [ "sports", "music" ]
}
1,

查询名字叫：
GET /gome/employee/_search?q=last_name:liue

2,查询名字叫：
GET /gome/employee/_search
{
    "query" : {
        "match" : {
            "last_name" : "yang"
        }
    }
}
3,年龄大于12岁，且名字叫“yang”：
GET /gome/employee/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : {
                    "age" : { "gt" : 12 }
                }
            },
            "query" : {
                "match" : {
                    "last_name" : "yang"
                }
            }
        }
    }
}
4，全文检索：
GET /gome/employee/_search
{
    "query" : {
        "match" : {
            "about" : "i to"
        }
    }
}
默认情况下，Elasticsearch根据结果相关性评分来对结果集进行排序，所谓的「结果相关性评分」就是文档与查询条件的匹配程度。很显然，排名第一的John Smith的about字段明确的写到“rock climbing”。

但是为什么Jane Smith也会出现在结果里呢？原因是“rock”在她的abuot字段中被提及了。因为只有“rock”被提及而“climbing”没有，所以她的_score要低于John。

这个例子很好的解释了Elasticsearch如何在各种文本字段中进行全文搜索，并且返回相关性最大的结果集。相关性(relevance)的概念在Elasticsearch中非常重要，而这个概念在传统关系型数据库中是不可想象的，因为传统数据库对记录的查询只有匹配或者不匹配。
5,短语搜索：
GET /gome/employee/_search
{
    "query" : {
        "match_phrase" : {
            "about" : "rock albums"
        }
    }
}
6,高亮我们的搜索:
GET /gome/employee/_search
{
    "query" : {
        "match_phrase" : {
            "about" : "rock albums"
        }
    },
    "highlight": {
        "fields" : {
            "about" : {}
        }
    }
}

7，聚合我们的结果：
GET /gome/employee/_search
{
  "aggs": {
    "all_interests": {
      "terms": { "field": "interests" }
    }
  }
}
8，聚合功能：
GET /gome/employee/_search
{
  "query": {
    "match": {
      "last_name": "tao"
    }
  },
  "aggs": {
    "all_interests": {
      "terms": {
        "field": "interests"
      }
    }
  }
}

9，每种兴趣下职员的平均年龄：
GET /gome/employee/_search
{
    "aggs" : {
        "all_interests" : {
            "terms" : { "field" : "interests" },
            "aggs" : {
                "avg_age" : {
                    "avg" : { "field" : "age" }
                }
            }
        }
    }
}
分布式集群：
状态为啥都是yellow的。
http://www.bjrbj.gov.cn/csibiz/indinfo/passwordSetAction!gerenreg1

检查社保

http://www.360doc.com/content/14/0119/22/15109633_346516210.shtml

130534195504022645

http://10.58.51.87:9201/_plugin/head/

http://10.58.45.16:8810/overview/37

http://10.58.22.2:9800/_plugin/head/

http://search.gome.com.cn/cloud/test.jsp

http://10.58.22.45:7003/gac/page/main/main.jsp
{
"query": {
"bool": {
"must": [
{
"query_string": {
"default_field": "_all",
"query": ""2015-11-27 15*""
}
}
],
"must_not": [ ],
"should": [ ]
}
},
"from": 0,
"size": 10,
"sort": [ ],
"facets": { }
}


PUT /product/employee/1
{
"first_name" : "John",
"last_name" : "Smith",
"age" : 25,
"about" : "I love to go rock climbing",
"interests": [ "sports", "music" ]
}
PUT /product/employee/2
{
"first_name" : "Jane",
"last_name" : "Smith",
"age" : 32,
"about" : "I like to collect rock albums",
"interests": [ "music" ]
}
PUT /product/employee/3
{
"first_name" : "Douglas",
"last_name" : "Fir",
"age" : 35,
"about": "I like to build cabinets",
"interests": [ "forestry" ]
}
2，
获得单个的商品：
GET /product/employee/_search
3，
域搜索：GET /product/employee/_search?q=last_name:Smith
4，
DSL (Domain Specific Language 领域特定语言) 检索
GET /product/employee/_search
{
"query" : {
"match" : {
"last_name" : "Smith"
}
}
}
5，
出姓 Smith 的员工，但是我们还将 添加一个年龄大于30岁的限定条件，添加过滤器
GET /product/employee/_search
{
"query" : {
"filtered" : {
"filter" : {
"range" : {
"age" : { "gt" : 30 }
}
},
"query" : {
"match" : {
"last_name" : "Smith"
}
}
}
}
}
6，
GET /product/employee/_search
{
"query" : {
"match" : {
"about" : "rock climbing"
}
}
}
7，match_phrase用法，精确匹配
GET /product/employee/_search
{
"query" : {
"match_phrase" : {
"about" : "rock climbing"
}
}
}
8，高亮显示搜索结果
GET /product/employee/_search
{
"query" : {
"match_phrase" : {
"about" : "rock climbing"
}
},
"highlight": {
"fields" : {
"about" : {}
}
}
}